// Copyright (c) 2022 Toqns Inc and contributors.

// ISC License

// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.

// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
// OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST

contract interface NFT =
    datatype metadata_type = URL | IPFS | OBJECT_ID | MAP
    datatype metadata = MetadataIdentifier(string) | MetadataMap(map(string, string))

    record meta_info = 
        { name: string
        , symbol: string
        , base_url: option(string)
        , metadata_type : metadata_type }

    // datatype event 
    //     = Transfer(address, address, int)
    //     | Approval(address, address, int, string)
    //     | ApprovalForAll(address, address, string)

    // Returns a hardcoded list of all implemented extensions on the deployed contract.
    entrypoint aex141_extensions : () => list(string)

    // Returns meta information associated with the contract.
    entrypoint meta_info : () => meta_info

    // Returns meta data associated with a token. 
    // The function is a part of the basic interface, because metadata can be set in the constructor, 
    // as well as by implementing the Mintable extention.
    entrypoint metadata : (int) => option(metadata)

    // Returns the account balance of another account with address `owner` if the account has a balance. 
    // If the owner address is unknown to the contract `None` will be returned. Using `option` type as a 
    // return value allows us to determine if the account has balance of 0, more than 0, or the account 
    // has never had balance and is still unknown to the contract.
    entrypoint balance : (address) => option(int)

    // Returns the owner's address for the provided token if the token is minted. 
    // If the token isn't minted None will be returned.
    entrypoint owner : (int) => option(address)

    // Transfers token from the from address to the to address. Will invoke NFTReceiver if to is a contract receiver. 
    // If provided data will be submitted with the invocation of NFTReceiver. Emits the Transfer event.
    //
    // Should throw if:
    // - Call.caller is not the current owner, an authorized operator or the approved address for this token;
    // - from isn't the current owner;
    // - token isn't a valid token;
    // - the invocation of NFTReceiver fails.    
    stateful entrypoint transfer : (address, address, int, option(string)) => unit

    // Sets the approved address to interact on behalf of an owner for the token. 
    // If enabled is true the operator is approved, if false the approval is revoked. 
    // Throws unless caller is the current NFT owner, or an authorized operator of the current owner. 
    // Emits the Approval event.
    stateful entrypoint approve : (address, int, bool) => unit

    // Enables or disables approval for an operator to manage all of the caller's assets. 
    // If enabled is true the operator is approved, if false the approval is revoked. 
    // Emits the ApprovalForAll event.
    stateful entrypoint approve_all : (address, bool) => unit

    // Returns the address approved to interact with the token or returns None if no approval has been set. 
    // Throws if token is an invalid token ID.
    entrypoint get_approved : (int) => option(address)

    // Returns true if approved is approved to transact for token.
    entrypoint is_approved : (int, address) => bool

    // Returns true if operator is approved to commit transactions on behalf of owner.
    // Indicates wether an address is an authorized operator for another address.
    entrypoint is_approved_for_all : (address, address) => bool

contract interface NFTReceiver = 
    entrypoint on_nft_received : (address, address, int, option(string)) => bool